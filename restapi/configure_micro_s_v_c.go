// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"net/http"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	graceful "github.com/tylerb/graceful"

	"fmt"
	"github.com/Magicking/microSVCSkel/models"
	"github.com/Magicking/microSVCSkel/restapi/operations"
	"github.com/globalsign/mgo"
	"log"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target .. --name  --spec ../docs/microsvc.yml

func configureFlags(api *operations.MicroSVCAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

type Key struct {
	Value string
}

func configureAPI(api *operations.MicroSVCAPI) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	api.ListHandler = operations.ListHandlerFunc(func(params operations.ListParams) middleware.Responder {
		session, err := mgo.Dial("mongo")
		if err != nil {
			err_str := fmt.Sprintf("%v", err)
			log.Println(err)
			return operations.NewPushDefault(500).WithPayload(&models.Error{
				Message: &err_str})
		}
		defer session.Close()

		db := session.DB("test")
		coll := db.C("mycoll")
		var result []Key
		err = coll.Find(nil).Iter().All(&result)
		if err != nil {
			err_str := fmt.Sprintf("%v", err)
			log.Println(err)
			return operations.NewPushDefault(500).WithPayload(&models.Error{
				Message: &err_str})
		}
		log.Printf("%v", result)
		return middleware.NotImplemented("operation .List has not yet been implemented")
	})
	api.PushHandler = operations.PushHandlerFunc(func(params operations.PushParams) middleware.Responder {
		session, err := mgo.Dial("mongo")
		if err != nil {
			err_str := fmt.Sprintf("%v", err)
			log.Println(err)
			return operations.NewPushDefault(500).WithPayload(&models.Error{
				Message: &err_str})
		}
		defer session.Close()

		db := session.DB("test")
		coll := db.C("mycoll")
		coll.Insert(&Key{Value: params.Message})
		return middleware.NotImplemented("operation .Push has not yet been implemented")
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return handler
}
