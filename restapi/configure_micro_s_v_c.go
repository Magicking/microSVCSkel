// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"fmt"
	"log"
	"net/http"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	swag "github.com/go-openapi/swag"
	graceful "github.com/tylerb/graceful"

	"github.com/jinzhu/gorm"
	"github.com/rs/cors"

	"github.com/Magicking/microSVCSkel/internal"
	"github.com/Magicking/microSVCSkel/models"
	"github.com/Magicking/microSVCSkel/restapi/operations"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target .. --name  --spec ../docs/microsvc.yml

var db *gorm.DB

var serviceopts struct {
	DbDSN string `long:"db-dsn" env:"DB_DSN" description:"Database DSN (e.g: /tmp/test.sqlite)"`
}

func configureFlags(api *operations.MicroSVCAPI) {
	serviceOpts := swag.CommandLineOptionsGroup{
		LongDescription:  "",
		ShortDescription: "Service options",
		Options:          &serviceopts,
	}
	api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{serviceOpts}
}

func configureAPI(api *operations.MicroSVCAPI) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	var err error
	db, err = internal.InitDatabase(serviceopts.DbDSN)
	if err != nil {
		log.Fatalf("internal.InitDatabase: %v", err)
	}
	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	api.ListHandler = operations.ListHandlerFunc(func(params operations.ListParams) middleware.Responder {
		lst, err := internal.ListAll(db)
		if err != nil {
			err_str := fmt.Sprintf("operations.ListHandlerFunc: %v", err)
			log.Println(err)
			return operations.NewPushDefault(500).WithPayload(&models.Error{
				Message: &err_str})
		}
		if len(lst) == 0 {
			return operations.NewListOK()
		}
		return operations.NewListOK().WithPayload(&models.Information{String: lst[len(lst)-1].Value})
	})
	api.PushHandler = operations.PushHandlerFunc(func(params operations.PushParams) middleware.Responder {
		err := internal.Insert(db, &internal.Key{Value: params.Message})
		if err != nil {
			err_str := fmt.Sprintf("operations.PushHandlerFunc: %v", err)
			log.Println(err)
			return operations.NewPushDefault(500).WithPayload(&models.Error{
				Message: &err_str})
		}
		return operations.NewPushOK().WithPayload(params.Message)
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	// See https://github.com/rs/cors#parameters for more information
	handleCORS := cors.Default().Handler
	return handleCORS(handler)
}
